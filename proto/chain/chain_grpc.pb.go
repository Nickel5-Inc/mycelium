// chain.proto defines the gRPC service for validator chain interactions

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: chain.proto

// Package chain contains the protobuf definitions for validator chain communication

package chain

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChainVerifier_VerifyPeer_FullMethodName  = "/chain.ChainVerifier/VerifyPeer"
	ChainVerifier_GetStake_FullMethodName    = "/chain.ChainVerifier/GetStake"
	ChainVerifier_GetRegistry_FullMethodName = "/chain.ChainVerifier/GetRegistry"
)

// ChainVerifierClient is the client API for ChainVerifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChainVerifierClient interface {
	// VerifyPeer validates a peer's signature and returns their stake information
	VerifyPeer(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error)
	// GetStake retrieves the current stake amount for a peer
	GetStake(ctx context.Context, in *StakeRequest, opts ...grpc.CallOption) (*StakeResponse, error)
	// GetRegistry returns the list of validators in a subnet
	GetRegistry(ctx context.Context, in *RegistryRequest, opts ...grpc.CallOption) (*RegistryResponse, error)
}

type chainVerifierClient struct {
	cc grpc.ClientConnInterface
}

func NewChainVerifierClient(cc grpc.ClientConnInterface) ChainVerifierClient {
	return &chainVerifierClient{cc}
}

func (c *chainVerifierClient) VerifyPeer(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error) {
	out := new(VerifyResponse)
	err := c.cc.Invoke(ctx, ChainVerifier_VerifyPeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainVerifierClient) GetStake(ctx context.Context, in *StakeRequest, opts ...grpc.CallOption) (*StakeResponse, error) {
	out := new(StakeResponse)
	err := c.cc.Invoke(ctx, ChainVerifier_GetStake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainVerifierClient) GetRegistry(ctx context.Context, in *RegistryRequest, opts ...grpc.CallOption) (*RegistryResponse, error) {
	out := new(RegistryResponse)
	err := c.cc.Invoke(ctx, ChainVerifier_GetRegistry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainVerifierServer is the server API for ChainVerifier service.
// All implementations must embed UnimplementedChainVerifierServer
// for forward compatibility
type ChainVerifierServer interface {
	// VerifyPeer validates a peer's signature and returns their stake information
	VerifyPeer(context.Context, *VerifyRequest) (*VerifyResponse, error)
	// GetStake retrieves the current stake amount for a peer
	GetStake(context.Context, *StakeRequest) (*StakeResponse, error)
	// GetRegistry returns the list of validators in a subnet
	GetRegistry(context.Context, *RegistryRequest) (*RegistryResponse, error)
	mustEmbedUnimplementedChainVerifierServer()
}

// UnimplementedChainVerifierServer must be embedded to have forward compatible implementations.
type UnimplementedChainVerifierServer struct {
}

func (UnimplementedChainVerifierServer) VerifyPeer(context.Context, *VerifyRequest) (*VerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPeer not implemented")
}
func (UnimplementedChainVerifierServer) GetStake(context.Context, *StakeRequest) (*StakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStake not implemented")
}
func (UnimplementedChainVerifierServer) GetRegistry(context.Context, *RegistryRequest) (*RegistryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistry not implemented")
}
func (UnimplementedChainVerifierServer) mustEmbedUnimplementedChainVerifierServer() {}

// UnsafeChainVerifierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChainVerifierServer will
// result in compilation errors.
type UnsafeChainVerifierServer interface {
	mustEmbedUnimplementedChainVerifierServer()
}

func RegisterChainVerifierServer(s grpc.ServiceRegistrar, srv ChainVerifierServer) {
	s.RegisterService(&ChainVerifier_ServiceDesc, srv)
}

func _ChainVerifier_VerifyPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainVerifierServer).VerifyPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainVerifier_VerifyPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainVerifierServer).VerifyPeer(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainVerifier_GetStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainVerifierServer).GetStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainVerifier_GetStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainVerifierServer).GetStake(ctx, req.(*StakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainVerifier_GetRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainVerifierServer).GetRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainVerifier_GetRegistry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainVerifierServer).GetRegistry(ctx, req.(*RegistryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChainVerifier_ServiceDesc is the grpc.ServiceDesc for ChainVerifier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChainVerifier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chain.ChainVerifier",
	HandlerType: (*ChainVerifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyPeer",
			Handler:    _ChainVerifier_VerifyPeer_Handler,
		},
		{
			MethodName: "GetStake",
			Handler:    _ChainVerifier_GetStake_Handler,
		},
		{
			MethodName: "GetRegistry",
			Handler:    _ChainVerifier_GetRegistry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chain.proto",
}
